git:
-----
to find the last change in a given file since a given version:
git blame a2c0ce44744039a365b61cc6f81e1528ee5b8478~1 -- py/strato/master/api/openstackapi/types.py
git reflog - 
git log -p origin/master..HEAD

stuck git patch:
This command will add the rebase "<<<<<<" signs:
    patch -p1 --merge --no-backup-if-mismatch < 0001-BK-1119.patch

afterwards, can run:
    git add <modified file 1> <modified file 2> <modified file 3>

and finally, run:
    git am --resolve


Define a new repository:

    Add another remote origin named "roei":
    git remote add roei https://github.com/roei-stratoscale/northbound.git
    
    !!!! FORCE push to the repository
    git push -f roei HEAD:master

    Push to a specific branch
    git push roei HEAD:stratocli_changes

RPMs:
-------
After running the 'make' command - rpms are under ./build/

python rpm extract:
rpm2cpio ../strato_api-1-0.x86_64.rpm | cpio -idmv




MUI:
--------------
automatic monkey port forwarding:
    port = self._controller.ssh.tunnel.localForwardMap()

use in the port in the browser: 
    127.0.0.1:port 


Network and HTTP:
-----------------
port forwarding:
* show port forwarding table: sudo iptables-save 



ssh tunneling: ssh -L <local port>:<remote ip from forwarded server>:<remote port from forwarded server> <forwarded server>
  ssh -L 3000:192.168.122.254:3000 strato@rack02-server05
  ssh -L 7000:192.168.122.254:7000 strato@rack02-server05

After ssh tunneling, you can run the cli locally (main.py uses port 7000):
  ./env python ../northbound/py/strato/northbound/cli/main.py

netstat:
  netstat -a -n --tcp
  netstat -l -n --tcp -p



CURL:
------
From the controller:
run the command to the restapi:
  curl http://0.0.0.0:7000/v1/VMs

create a new VM from REST:
  curl http://localhost:7000/v1/VMs -d "name=shahar4&image-id=69e756e2-9c54-4a14-9b7b-268660e44827"
  curl -X POST -v http://localhost:7000/v1/VMs?name=shahar11name=shahar10&image-id=69e756e2-9c54-4a14-9b7b



racktests:
------------------
from monkey:    make phystest REGEXP="--regex 200_concurrent_actions.py"

to reade the logs nicely:
sh/strato-log --noDebug logs.racktest/racktests.REST.200_concurrent_actions/test.stratolog
To get list of nodes:
sh/strato-log --noDebug logs.racktest/racktests.REST.200_concurrent_actions/test.stratolog | grep "Host allocated"

to log in to a node with port 2079:
/home/roei/work/pydonkey/tools/sshnode.py 2079

copy a file to the rackattack provider (password: rackattack):
scp -P 2079 build/rpms/* root@rackattack-provider:

virt from cli:
show all vms: virsh -c qemu:///system list --all
show specific xml for vm: virsh -c qemu:///system dumpxml <name
	example: virsh -c qemu:///system dumpxml strato-openstackcontroller-vanilla 


Mount a vanila (like ISO)
dc> ./env python /home/roei/roei/mount.py /home/roei/work/dc/vmclones/strato-openstackagent-vanilla.qcow2

ssh tunneling Posner style: (-fnN means run in background)
sshpass -p rackattack ssh -o ServerAliveInterval=5 -o ServerAliveCountMax=1 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 2099 root@rackattack-nat -L 8081:localhost:80 -fnN


pullrequest:
from dc: pullequest somename
will create a new remote branch in dc: pullrequest_roei_somename_<timestamp>
to remove this branch from the remote: git push origin :pullrequest_roei_somename_<timestamp>


debugging python (shahar style):
--------------------------------
don't run dc/env
run: UPSETO_JOIN_PYTHON_NAMESPACES=yes PYTHONPATH=py ipython
start importing packages, use package __path__ & __file__ to investigate imported files




egg files:
list files:
    unzip -l /usr/share/stratostorage/mancala_management_api.egg

tar:
    tar -I pigz -xvf nova-compute.gz

import egg:
>>> import sys
>>> sys.path.append('/usr/share/stratostorage/mancala_management_api.egg')




unittests:
------------
run a single unittest (can add pdb to the unittest):
for example, run the test_restfuladapter.py test in northbound/ : 
STRATO_CONF_DIRECTORY=/etc/stratoscale UPSETO_JOIN_PYTHON_NAMESPACES=yes PYTHONPATH="py" python ../voodoo-mock/pytest/pytestrunner.py --cui `find . -name 'test_main*.py'`

Now with printing the output:
STRATO_CONF_DIRECTORY=/etc/stratoscale UPSETO_JOIN_PYTHON_NAMESPACES=yes PYTHONPATH="py" python ../voodoo-mock/pytest/pytestrunner.py --verbose ./py/strato/northbound/cli/tests/test_cli_help_output.py

using rpdb:
add: import rpdb; rpdb.set_trace()
STRATO_CONF_DIRECTORY=/etc/stratoscale UPSETO_JOIN_PYTHON_NAMESPACES=yes PYTHONPATH=py:../consulate python ../voodoo-mock/pytest/pytestharness.py `find . -name 'test_stratocmd.py'`
from another prompt: nc 127.0.0.1 4444


whitebox test:
--------------
In harbour:
UPSETO_JOIN_PYTHON_NAMESPACES=yes PYTHONPATH=py:py/strato:../openstackapi/testing ../pywhiteboxtest/runner --regex whiteboxtest/2_db_test.py

Hourbour unittest:
-------------------
UPSETO_JOIN_PYTHON_NAMESPACES=yes PYTHONPATH=py:py/strato python -m unittest discover py/ -p "test_metadata.py"


harbour debugging:
-------------------
add the following line to /etc/hosts:
127.0.0.1 harbourd.service.strato

stop the service:
    systemctl stop harbourd
or if that doesn't work: 
    pkill -9 uwsgi
remove the "file" line from the configuration config:
/etc/harbour/uwsgi.conf


run manually:
PYTHONPATH=$PYTHONPATH:/usr/share/strato/harbour/ STRATO_CONF_DIRECTORY=/etc/stratoscale/ STRATO_LOGS_DIRECTORY=/var/log/stratoscale STRATO_LOGS_CONFIGURATION_FILE=/usr/share/strato/harbour/logconf.json  HOME=/root /usr/bin/uwsgi --ini /etc/harbour/uwsgi.conf --honour-stdin

copy rpms:
mkdir rpms; ssh-keygen; ssh-copy-id roei@10.0.1.212; scp -r roei@10.0.1.212:/home/roei/work/northbound/build/rpms/* roei@10.0.1.212:/home/roei/work/harbour/build/rpm/* ./rpms; yum reinstall rpms/* -y
scp -r roei@10.0.1.212:/home/roei/work/northbound/build/rpms/* roei@10.0.1.212:/home/roei/work/harbour/build/rpm/* ./rpms; yum reinstall rpms/* -y


Shahar gdb python process debuging:
-----------------------------------
Download the python debug info rpm:
yum install -y wget; wget http://buildlogs.centos.org/c7.00.04/python/20140617165351/2.7.5-16.el7.x86_64/python-debuginfo-2.7.5-16.el7.x86_64.rpm; yum install -y python-debuginfo-2.7.5-16.el7.x86_64.rpm;

run gdb on the process:
gdb -p <process number>

inside gdb:
show thread info:
    thread info 
show treads backtrace:
    thread apply all backtrace


Put backtrace into a file:
    echo 'thread apply all backtrace' > gdb_commands.txt
    gdb -p 10587 -batch -x gdb_commands.txt > output.txt




mancala:
--------
mancala volumes list


libvirt:
----------
get VM list:
  virsh -c qemu:///system
start a VM:  
  virsh -c qemu:///system start strato-vanialla
turn off VM:
  virsh -c qemu:///system shutdown strato-vanilla
print the VM XML:
  virsh -c qemu:///system dumpxml strato-vanilla



On the controller:
---------------------
login: ssh root@192.168.122.254
get permissions for cinder: source keystonerc_admin
run cinder commands: cinder <>
get nova list: nova list
get list of images: glance image-list

Play with keystone mariaDB/mysql:
login to mysql shell: 
    KEYSTONE_PASSWORD is in /etc/keystone/ configuration file
    mysql -ukeystone -pKEYSTONE_PASSWORD keystone    # mysql -ukeystone -p044542c981cd253f1f6184b835a965eb keystone






systemctl:
-----------
reload the deamon after installing new service rpm:  
systemctl daemon-reload
systemctl --system daemon-reload

check the service:
rpm -qi strato_api

check list of files per service:
rpm -ql strato_api

service file:
rpm -ql strato_api | grep '.service$'



racktests:

running a single racktest from monkey with ./env:
make phystest REGEXP="--regex 200_"

reading the logs nocely:
/home/roei/work2/dc/sh/strato-log --noDebug ../monkey/logs.racktest/racktests.REST.200_concurrent_actions/test.stratolog | vim -


osmosis
-------

Check if osmosis (solvent) has a given lable:
osmosis listlabels --objectStores=oberon:1010 | grep 2ba52c7d6a31f80baaa85e69c40c63ef1d784442
osmosis listlabels --objectStores=osmosis.dc1.strato:1010 | grep f8e337b2eebb41f9fcf8c53fb6d596b521f6f385

Undo removed lable from the local osmosis:
sudo osmosis checkout build/root solvent__rootfs-star__rootfs__2ba52c7d6a31f80baaa85e69c40c63ef1d784442__dirty
sudo osmosis checkin build/root solvent__rootfs-star__rootfs__2ba52c7d6a31f80baaa85e69c40c63ef1d784442__dirty --objectStores oberon:1010


How to change a rootfs in a not-ordinary way:
------------------------------------------------

find the rootfs you want. for example: solvent__rootfs-star__rootfs__3e4c995427600f20b7bc5b2accf5c5082a13b75d__official

import rootfs from osmosis:
roei@localhost~/work> sudo osmosis checkout eran-rootfs/ solvent__rootfs-star__rootfs__3e4c995427600f20b7bc5b2accf5c5082a13b75d__official --objectStores oberon:1010

To change files:
sudo chroot eran-rootfs

exit chroot with cntl+d.

sudo osmosis checkin eran-rootfs/ roei_best_rootfs_ever --MD5 --objectStores oberon:1010

osmosis transfer command (move object from one object store to another):
osmosis transfer solvent__rootfs-star__config__3f5fc26f85e56dd75072fba0861a2f766a50e1a0__dirty --objectStores=oberon:1010 --transferDestination=osmosis.dc1.strato:1010





On the controler:
------------------
Nova client is under: /usr/lib/python2.7/site-packages/novaclient/
NOVA CLI command example: nova --os-username user110 --os-tenant-name tenant110 --os-password user110 --os-auth-url http://localhost:5000/v2.0/ flavor-list

To change nova or other root-fs packages go to: work/distrato-yamls/yamls/pkgmeta and check the version. For example, to find out the default package of nova:
roei@localhost~/work/distrato-yamls> grep binary_rpm -A 1 yamls/pkgmeta/openstack-nova.yaml | tail -1
  - {filehash: 7289e6d65831bc1db79925a828a4b6c1, filename: openstack-nova-2014.1.2-1.s2.el7.centos.strato.98c2cf3b9748.noarch.rpm}

Take the tag from the filename: "2014.1.2" and look it up in git on the nova repo:
roei@localhost~/work/nova> git log -1 2014.1.2 | head -1
commit 14080812961e5a2f6a7054a45d2afa013e4f3899



pip
----
To download a pip package: pip2tgz . rpdb




On the controler, run the services manually:

  Glance:
    systemctl stop openstack-glance-api.service
    python /usr/bin/glance-api

  Nova:
    systemctl stop openstack-nova-api
    python /usr/bin/nova-api

  Strato-api:
    systemctl stop strato-api
    export PYTHONPATH=/usr/share/strato-api:$PYTHONPATH
    export STRATO_LOGS_DIRECTORY=/var/log/stratoscale
    export STRATO_CONF_DIRECTORY=/etc/stratoscale
    export HOME=/root
    export TMPDIR=/var/tmp
    mkdir -p /mnt/nfs
    python -m strato.northbound.api.main start


FTP:
images ftp:
    ftp images.dc1
    uesername and password = images
